{"version":3,"sources":["index.js"],"names":["ref","navigation","document","querySelector","firstBtn","secondBtn","thirdBtn","onClick","event","target","task3","task2","task1","console","log","delay","ms","Promise","resolve","setTimeout","logger","time","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","logger2","table","randomIntegerFromInterval","makeTransaction","transaction","min","max","Math","floor","random","promise","reject","id","logSuccess","logError","warn","amount","catch","addEventListener"],"mappings":"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","file":"src.286e4811.js","sourceRoot":"..\\src","sourcesContent":["const ref = {\r\n    navigation: document.querySelector('.nav'),\r\n    firstBtn: document.querySelector('.first'),\r\n    secondBtn: document.querySelector('.second'),\r\n    thirdBtn: document.querySelector('.third')\r\n}\r\n\r\nref.navigation.addEventListener('click', onClick);\r\n\r\n\r\nfunction onClick(event) {\r\n\r\n\r\n    if (event.target === ref.firstBtn) {\r\n        task1();\r\n        return;\r\n    } else if (event.target === ref.secondBtn) {\r\n        task2();\r\n        return;\r\n    } else if (event.target === ref.thirdBtn) {\r\n        task3();\r\n        return;\r\n    }\r\n\r\n}\r\n\r\nfunction task1() {\r\n    console.log(\"1st task\");\r\n    const delay = ms => {\r\n\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                resolve(ms);\r\n            }, ms);\r\n        })\r\n    };\r\n    const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n    delay(2000).then(logger);\r\n    delay(1000).then(logger);\r\n    delay(1500).then(logger);\r\n}\r\n\r\n\r\nfunction task2() {\r\n    console.log(\"2nd task\");\r\n\r\n    const users = [\r\n        { name: 'Mango', active: true },\r\n        { name: 'Poly', active: false },\r\n        { name: 'Ajax', active: true },\r\n        { name: 'Lux', active: false },\r\n    ];\r\n\r\n    const toggleUserState = (allUsers, userName) => {\r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? {...user, active: !user.active } : user,\r\n        );\r\n\r\n        return Promise.resolve(updatedUsers);\r\n    };\r\n\r\n    const logger2 = updatedUsers => console.table(updatedUsers);\r\n\r\n    toggleUserState(users, 'Mango').then(logger2);\r\n    toggleUserState(users, 'Lux').then(logger2);\r\n};\r\n\r\n\r\n\r\n\r\nfunction task3() {\r\n    console.log(\"3 task\");\r\n    const randomIntegerFromInterval = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    };\r\n\r\n    const makeTransaction = (transaction) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n\r\n\r\n        const promise = new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                const canProcess = Math.random() > 0.3;\r\n\r\n                if (canProcess) {\r\n                    resolve([transaction.id, delay]);\r\n                } else {\r\n                    reject(transaction.id);\r\n                }\r\n            }, delay);\r\n        });\r\n\r\n        return promise;\r\n    };\r\n\r\n    const logSuccess = ([id, time]) => {\r\n        console.log(`Transaction ${id} processed in ${time}ms`);\r\n    };\r\n\r\n    const logError = id => {\r\n        console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n    };\r\n    /*\r\n   * Работает так\r\n \r\n  makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n  makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n  makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n  makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n  /*\r\n   * Должно работать так\r\n   */\r\n    makeTransaction({ id: 70, amount: 150 })\r\n        .then(logSuccess)\r\n        .catch(logError);\r\n\r\n    makeTransaction({ id: 71, amount: 230 })\r\n        .then(logSuccess)\r\n        .catch(logError);\r\n\r\n    makeTransaction({ id: 72, amount: 75 })\r\n        .then(logSuccess)\r\n        .catch(logError);\r\n\r\n    makeTransaction({ id: 73, amount: 100 })\r\n        .then(logSuccess)\r\n        .catch(logError);\r\n};"]}